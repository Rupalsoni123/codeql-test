name: Security Scanning with Snyk, Bandit, SonarQube, and More

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: '23 18 * * 2'  # Runs weekly on Tuesday at 18:23 UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write # Required for uploading SARIF files

jobs:
  analyze_codeql:
    name: Analyze Code with CodeQL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: .github/codeql/results.sarif

      - name: Upload CodeQL SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: .github/codeql/results.sarif
          token: ${{ secrets.GITHUB_TOKEN }}
          category: codeql-analysis-unique-category
          wait-for-processing: true

  bandit_scan:
    name: Bandit Python Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Bandit Security Scan
        uses: shundor/python-bandit-scan@9cc5aa4a006482b8a7f91134412df6772dbda22c
        with:
          exit_zero: true
          path: "."
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  snyk_scan:
    name: Snyk Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Snyk CLI
        uses: snyk/actions/setup@v4
        with:
          version: "latest"

      - name: Run Snyk Code Test (SAST) and Generate SARIF
        run: |
          snyk code test --sarif > snyk-code.sarif 2>&1 || true
          cat snyk-code.sarif # Debugging step: Check content of SARIF file

      - name: Validate Snyk SARIF
        run: |
          if jq empty snyk-code.sarif; then
            echo "Invalid SARIF file"
            exit 1
          fi

      - name: Upload Snyk Code Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif
          token: ${{ secrets.GITHUB_TOKEN }}
          category: snyk-security-unique-category
          wait-for-processing: true

  sonarqube_scan:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Analyze with SonarQube
        uses: SonarSource/sonarqube-scan-action@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Token added to your repository's secrets
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # URL of your SonarQube instance
        with:
          args: >
            -Dsonar.projectKey=your_project_key
            -Dsonar.sources=.
            -Dsonar.language=python
            -Dsonar.exclusions=**/test/**,**/docs/**

  debricked_scan:
    name: Debricked Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Debricked Security Scan
        uses: debricked/actions/docker-scan@v3
        with:
          path: .
        env:
          DEBRICKED_TOKEN: ${{ secrets.DEBRICKED_TOKEN }}

  codacy_scan:
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Codacy CLI
        run: |
          curl -sS https://download.codacy.com/cli/linux/codacy-cli-linux-amd64-6.1.0.tar.gz | tar xz
          sudo mv codacy-cli /usr/local/bin

      - name: Run Codacy Scan
        run: |
          codacy-cli -t ${{ secrets.CODACY_PROJECT_TOKEN }} analyze --sarif > codacy-code.sarif
          cat codacy-code.sarif # Debugging step: Check content of SARIF file

      - name: Upload Codacy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: codacy-code.sarif
          token: ${{ secrets.GITHUB_TOKEN }}
          category: codacy-analysis-unique-category
          wait-for-processing: true
