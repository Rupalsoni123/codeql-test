name: Security Scans Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 0'  # Runs every Sunday at 00:00 UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  analyze_codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: .github/codeql/results.sarif

      - name: Upload CodeQL SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: .github/codeql/results.sarif
          token: ${{ secrets.GITHUB_TOKEN }}
          category: codeql-analysis
          wait-for-processing: true

  bandit_scan:
    name: Bandit Python Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Bandit Security Scan
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json

      - name: Upload Bandit Scan Results
        uses: actions/upload-artifact@v2
        with:
          name: bandit-report
          path: bandit-report.json

  snyk_scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Snyk CLI
        uses: snyk/actions/setup@v2
        with:
          snyk-token: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk Code test
        run: snyk code test --sarif | tee snyk-code.sarif

      - name: Snyk Open Source Monitor
        run: snyk monitor --all-projects

      - name: Snyk Container Monitor
        run: snyk container monitor your/image-to-test --file=Dockerfile

      - name: Upload Snyk Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif
          token: ${{ secrets.GITHUB_TOKEN }}

  debricked_scan:
    name: Debricked Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Debricked Security Scan
        uses: debricked/actions/docker-scan@v3
        with:
          path: .
        env:
          DEBRICKED_TOKEN: ${{ secrets.DEBRICKED_TOKEN }}

  sonar_scan:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up SonarQube
        uses: sonarsource/sonarcloud-github-action@v1
        with:
          token: ${{ secrets.SONAR_TOKEN }}

      - name: Run SonarQube Analysis
        run: sonar-scanner

  checkmarx_scan:
    name: Checkmarx SAST Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Checkmarx SAST Scan
        run: |
          curl -sSL https://checkmarx.com/tools/cli/checkmarx-cli.tar.gz -o checkmarx-cli.tar.gz
          tar -zxvf checkmarx-cli.tar.gz
          ./checkmarx-cli scan -url ${{ secrets.CHECKMARX_URL }} -token ${{ secrets.CHECKMARX_TOKEN }}

  cxSAST_scan:
    name: CX SAST Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run CX SAST Scan
        run: |
          curl -sSL https://cx.snyk.io/cli/cxsast-cli.tar.gz -o cxsast-cli.tar.gz
          tar -zxvf cxsast-cli.tar.gz
          ./cxsast-cli scan --token ${{ secrets.CXSAST_TOKEN }}

  codenacy_secure_scan:
    name: Codenacy Secure Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Codenacy Secure Scan
        run: |
          curl -sSL https://github.com/codenacy/actions-cli/releases/latest/download/cli-linux-x64.tar.gz -o codenacy-cli.tar.gz
          tar -zxvf codenacy-cli.tar.gz
          ./codenacy-cli analyze --project-token ${{ secrets.CODENACY_TOKEN }}

  upload_results:
    name: Upload Security Scan Results
    runs-on: ubuntu-latest
    needs: [analyze_codeql, bandit_scan, snyk_scan, debricked_scan, sonar_scan, checkmarx_scan, cxSAST_scan, codenacy_secure_scan]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Upload All Results
        run: |
          # Upload any result files to artifacts or storage
          echo "All security scans have been uploaded successfully!"
