name: Snyk Security

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read  # To fetch the repository code
  security-events: write  # For uploading SARIF results to GitHub Security tab

jobs:
  snyk:
    permissions:
      contents: read  # Required for actions/checkout
      security-events: write  # Required for GitHub Code Scanning
      actions: read  # Only required for private repositories

    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - uses: actions/checkout@v4

      # Step 2: Set up Snyk CLI to check for security issues
      - name: Set up Snyk CLI to check for security issues
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}  # Your Snyk API Token

      # Step 3: Snyk Code (SAST) analysis and uploading SARIF results
      - name: Snyk Code test
        run: snyk code test --sarif > snyk-code.sarif

      # Step 4: Snyk Open Source (SCA) analysis and monitoring all projects
      - name: Snyk Open Source monitor
        run: snyk monitor --all-projects

      # Step 5: Snyk Infrastructure as Code (IaC) analysis and reporting
      - name: Snyk IaC test and report
        run: snyk iac test --report

      # Step 6: Build Docker image for container scan
      - name: Build a Docker image
        run: docker build -t your/image-to-test .

      # Step 7: Snyk Container analysis and monitoring the Docker image
      - name: Snyk Container monitor
        run: snyk container monitor your/image-to-test --file=Dockerfile

      # Step 8: Upload Snyk Code results to GitHub Security Code Scanning
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif
          token: ${{ secrets.GITHUB_TOKEN }}
          category: snyk-analysis
          wait-for-processing: true
